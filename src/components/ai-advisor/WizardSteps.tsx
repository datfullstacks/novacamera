'use client';

import { useState } from 'react';

interface WizardStepsProps {
  currentStep: number;
  onStepComplete: (data: Record<string, unknown>) => void;
  onSkip?: () => void;
}

export default function WizardSteps({ currentStep, onStepComplete, onSkip }: WizardStepsProps) {
  // Step 1: Photography Type
  const photographyTypes = [
    { id: 'portrait', label: 'Ch√¢n dung', icon: 'üë§', description: 'Ch·ª•p ·∫£nh ch√¢n dung chuy√™n nghi·ªáp ho·∫∑c b√¨nh th∆∞·ªùng' },
    { id: 'wedding', label: 'ƒê√°m c∆∞·ªõi & s·ª± ki·ªán', icon: 'üíí', description: 'N·∫Øm b·∫Øt nh·ªØng d·ªãp ƒë·∫∑c bi·ªát v√† l·ªÖ k·ª∑ ni·ªám' },
    { id: 'landscape', label: 'Phong c·∫£nh & Du l·ªãch', icon: 'üèîÔ∏è', description: 'Nhi·∫øp ·∫£nh thi√™n nhi√™n, phong c·∫£nh v√† du l·ªãch' },
    { id: 'commercial', label: 'Th∆∞∆°ng m·∫°i & S·∫£n ph·∫©m', icon: 'üì¶', description: '·∫¢nh ch·ª•p s·∫£n ph·∫©m v√† ch·ª•p ·∫£nh th∆∞∆°ng m·∫°i' },
    { id: 'sports', label: 'Th·ªÉ thao & H√†nh ƒë·ªông', icon: '‚öΩ', description: 'C√°c ƒë·ªëi t∆∞·ª£ng chuy·ªÉn ƒë·ªông nhanh v√† c√°c b·ª©c ·∫£nh h√†nh ƒë·ªông' },
    { id: 'filmmaking', label: 'L√†m phim & video', icon: 'üé¨', description: 'S·∫£n xu·∫•t video chuy√™n nghi·ªáp' },
    { id: 'vlogging', label: 'Vlogging & n·ªôi dung', icon: 'üìπ', description: 'Ph∆∞∆°ng ti·ªán truy·ªÅn th√¥ng x√£ h·ªôi v√† s√°ng t·∫°o n·ªôi dung' },
    { id: 'other', label: 'Kh√°c', icon: 'üì∏', description: 'Nhu c·∫ßu nhi·∫øp ·∫£nh chuy√™n m√¥n ho·∫∑c ƒë·ªôc ƒë√°o' },
  ];

  // Step 2: Skill Level
  const skillLevels = [
    { id: 'beginner', label: 'Ng∆∞·ªùi m·ªõi b·∫Øt ƒë·∫ßu', description: 'T√¥i ch·ªâ b·∫Øt ƒë·∫ßu v√† th√≠ch thi·∫øt b·ªã d·ªÖ s·ª≠ d·ª•ng.' },
    { id: 'intermediate', label: 'Trung c·∫•p', description: 'T√¥i c√≥ m·ªôt s·ªë kinh nghi·ªám v√† c√≥ th·ªÉ x·ª≠ l√Ω b√°nh rƒÉng trung gian.' },
    { id: 'advanced', label: 'Tr√¨nh ƒë·ªô cao', description: 'T√¥i l√† m·ªôt nhi·∫øp ·∫£nh gia c√≥ kinh nghi·ªám ho·∫∑c chuy√™n nghi·ªáp c·∫ßn thi·∫øt b·ªã n√¢ng cao.' },
  ];

  // Step 3: Budget
  const budgetRanges = [
    { id: 'economy', label: 'Kinh t·∫ø', value: 50000, description: '50.000ƒë/ng√†y' },
    { id: 'standard', label: 'Ti√™u chu·∫©n', value: 100000, description: '100.000ƒë/ng√†y' },
    { id: 'premium', label: 'Cao c·∫•p', value: 300000, description: '300.000ƒë/ng√†y' },
  ];

  // Step 4: Options (Brands & Features)
  const brands = ['Canon', 'Sony', 'Nikon', 'Fujifilm', 'Zeiss', 'DJI', 'Panasonic', 'Sigma', 'PUNTOTO', 'Godox'];
  
  const features = [
    { id: 'lowlight', label: '√Ånh s√°ng y·∫øu', icon: 'üåô' },
    { id: 'video', label: 'Video n√¢ng cao', icon: 'üìπ' },
    { id: 'autofocus', label: 'T·ª± ƒë·ªông l·∫•y n√©t nhanh', icon: 'üéØ' },
    { id: 'lightweight', label: 'Nh·∫π & di ƒë·ªông', icon: 'ü™∂' },
    { id: 'stabilization', label: '·ªîn ƒë·ªãnh h√¨nh ·∫£nh', icon: 'üåÄ' },
    { id: 'professional-video', label: 'Video chuy√™n nghi·ªáp', icon: 'üé•' },
    { id: 'weather-sealed', label: 'Th·ªùi ti·∫øt k√≠n', icon: 'üå¶' },
    { id: 'film-simulation', label: 'M√¥ ph·ªèng phim', icon: 'üéû' },
  ];

  const handleTypeSelect = (typeId: string) => {
    onStepComplete({ photographyType: typeId });
  };

  const handleSkillSelect = (skillId: string) => {
    onStepComplete({ skillLevel: skillId });
  };

  const handleBudgetSelect = (budgetValue: number) => {
    onStepComplete({ budget: budgetValue });
  };

  const handleOptionsSelect = (selectedBrands: string[], selectedFeatures: string[]) => {
    onStepComplete({ brands: selectedBrands, features: selectedFeatures });
  };

  if (currentStep === 1) {
    return (
      <div className="p-6 bg-white rounded-lg shadow-sm">
        <h3 className="text-lg font-semibold text-gray-900 mb-2">
          B·∫°n ƒëang l√™n k·∫ø ho·∫°ch cho lo·∫°i nhi·∫øp ·∫£nh ho·∫∑c video n√†o?
        </h3>
        <p className="text-sm text-gray-600 mb-6">
          B∆∞·ªõc &ldquo;Ki·ªÉu&rdquo; gi√∫p b·∫°n x√°c ƒë·ªãnh th·ªÉ lo·∫°i nhi·∫øp ·∫£nh ho·∫∑c video (ch√¢n dung, s·ª± ki·ªán, phong c·∫£nh‚Ä¶) t·ª´ ƒë√≥ AI s·∫Ω g·ª£i √Ω thi·∫øt b·ªã ph√π h·ª£p nh·∫•t v·ªõi nhu c·∫ßu s√°ng t·∫°o c·ªßa b·∫°n.
        </p>
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          {photographyTypes.map((type) => (
            <button
              key={type.id}
              onClick={() => handleTypeSelect(type.id)}
              className="text-left p-4 border-2 border-gray-200 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-all group"
            >
              <div className="flex items-start gap-3">
                <span className="text-3xl">{type.icon}</span>
                <div className="flex-1">
                  <h4 className="font-semibold text-gray-900 group-hover:text-blue-600">
                    {type.label}
                  </h4>
                  <p className="text-sm text-gray-700 mt-1">{type.description}</p>
                </div>
              </div>
            </button>
          ))}
        </div>
        {onSkip && (
          <button
            onClick={onSkip}
            className="mt-4 w-full text-sm text-gray-900 hover:text-black underline font-medium"
          >
            B·∫°n mu·ªën b·ªè qua ƒëi·ªÅu n√†y v√† tr√≤ chuy·ªán v·ªõi Shop
          </button>
        )}
      </div>
    );
  }

  if (currentStep === 2) {
    return (
      <div className="p-6 bg-white rounded-lg shadow-sm">
        <h3 className="text-lg font-semibold text-gray-900 mb-2">
          M·ª©c ƒë·ªô k·ªπ nƒÉng nhi·∫øp ·∫£nh c·ªßa b·∫°n l√† g√¨?
        </h3>
        <p className="text-sm text-gray-600 mb-6">
          B∆∞·ªõc &ldquo;K·ªπ nƒÉng&rdquo; gi√∫p AI x√°c ƒë·ªãnh tr√¨nh ƒë·ªô chuy√™n m√¥n c·ªßa b·∫°n ƒë·ªÉ g·ª£i √Ω thi·∫øt b·ªã ph√π h·ª£p - t·ª´ d·ªÖ s·ª≠ d·ª•ng cho ng∆∞·ªùi m·ªõi ƒë·∫øn chuy√™n nghi·ªáp cho cao th·ªß.
        </p>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          {skillLevels.map((level) => (
            <button
              key={level.id}
              onClick={() => handleSkillSelect(level.id)}
              className="text-center p-6 border-2 border-gray-200 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-all group"
            >
              <div className="flex flex-col items-center gap-3">
                <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center group-hover:bg-blue-100">
                  <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth={1.5} stroke="currentColor" className="w-8 h-8 text-gray-700 group-hover:text-blue-600">
                    <path strokeLinecap="round" strokeLinejoin="round" d="M6.827 6.175A2.31 2.31 0 015.186 7.23c-.38.054-.757.112-1.134.175C2.999 7.58 2.25 8.507 2.25 9.574V18a2.25 2.25 0 002.25 2.25h15A2.25 2.25 0 0021.75 18V9.574c0-1.067-.75-1.994-1.802-2.169a47.865 47.865 0 00-1.134-.175 2.31 2.31 0 01-1.64-1.055l-.822-1.316a2.192 2.192 0 00-1.736-1.039 48.774 48.774 0 00-5.232 0 2.192 2.192 0 00-1.736 1.039l-.821 1.316z" />
                    <path strokeLinecap="round" strokeLinejoin="round" d="M16.5 12.75a4.5 4.5 0 11-9 0 4.5 4.5 0 019 0zM18.75 10.5h.008v.008h-.008V10.5z" />
                  </svg>
                </div>
                <div>
                  <h4 className="font-semibold text-gray-900 group-hover:text-blue-600 mb-1">
                    {level.label}
                  </h4>
                  <p className="text-sm text-gray-700">{level.description}</p>
                </div>
              </div>
            </button>
          ))}
        </div>
        
        {/* C·∫ßn t∆∞ v·∫•n chi ti·∫øt h∆°n Section */}
        <div className="mt-8 text-center">
          <h4 className="text-lg font-semibold text-gray-900 mb-3">
            C·∫ßn t∆∞ v·∫•n chi ti·∫øt h∆°n
          </h4>
          <p className="text-sm text-gray-600 mb-4">
            C√°c chuy√™n gia nhi·∫øp ·∫£nh c·ªßa ch√∫ng t√¥i ƒë√£ s·∫µn s√†ng ƒë·ªÉ gi√∫p b·∫°n t√¨m th·∫•y thi·∫øt b·ªã ho√†n h·∫£o cho c√°c nhu c·∫ßu c·ª• th·ªÉ c·ªßa b·∫°n. Ph·∫£n h·ªìi s·∫Ω ƒë∆∞·ª£c ph·∫£n h·ªìi trong v√≤ng 24 gi·ªù.
          </p>
          <button
            onClick={() => alert('T√≠nh nƒÉng chat v·ªõi chuy√™n gia s·∫Øp ra m·∫Øt!')}
            className="bg-black text-white px-6 py-2.5 rounded-lg text-sm font-medium hover:bg-gray-800 transition-colors"
          >
            Tr√≤ chuy·ªán v·ªõi Shop
          </button>
        </div>
      </div>
    );
  }

  if (currentStep === 3) {
    return (
      <BudgetStep onComplete={handleBudgetSelect} budgetRanges={budgetRanges} />
    );
  }

  if (currentStep === 4) {
    return (
      <OptionsStep onComplete={handleOptionsSelect} brands={brands} features={features} />
    );
  }

  return null;
}

// Budget Step Component (separate for interactivity)
function BudgetStep({
  onComplete,
  budgetRanges
}: {
  onComplete: (budget: number) => void;
  budgetRanges: Array<{ id: string; label: string; value: number; description: string }>;
}) {
  const [selectedBudget, setSelectedBudget] = useState(100000);

  const handleSliderChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSelectedBudget(parseInt(e.target.value));
  };

  const handlePresetSelect = (value: number) => {
    setSelectedBudget(value);
  };

  const handleContinue = () => {
    onComplete(selectedBudget);
  };

  return (
    <div className="p-6 bg-white rounded-lg shadow-sm">
      <h3 className="text-lg font-semibold text-gray-900 mb-2">
        Ng√¢n s√°ch cho thu√™ c·ªßa b·∫°n m·ªói ng√†y l√† bao nhi√™u?
      </h3>
      <p className="text-sm text-gray-600 mb-6">
        Ch·ªçn chi ti√™u h√†ng ng√†y ∆∞a th√≠ch c·ªßa b·∫°n ƒë·ªÉ gi√∫p ch√∫ng t√¥i ƒë·ªÅ xu·∫•t c√°c thi·∫øt b·ªã ph√π h·ª£p v·ªõi ng√¢n s√°ch c·ªßa b·∫°n.
      </p>

      {/* Slider */}
      <div className="mb-6">
        <div className="relative">
          <input
            type="range"
            min="50000"
            max="500000"
            step="50000"
            value={selectedBudget}
            onChange={handleSliderChange}
            className="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
            style={{
              background: `linear-gradient(to right, #3B82F6 0%, #3B82F6 ${((selectedBudget - 50000) / (500000 - 50000)) * 100}%, #E5E7EB ${((selectedBudget - 50000) / (500000 - 50000)) * 100}%, #E5E7EB 100%)`
            }}
          />
          <div 
            className="absolute -top-10 left-1/2 transform -translate-x-1/2 bg-black text-white px-3 py-1 rounded text-sm font-medium"
            style={{ left: `${((selectedBudget - 50000) / (500000 - 50000)) * 100}%` }}
          >
            {selectedBudget.toLocaleString('vi-VN')}‚Ç´
          </div>
        </div>
      </div>

      {/* Selected Budget Display */}
      <div className="text-center mb-6">
        <p className="text-lg font-semibold text-gray-900">
          B·∫°n ƒë√£ ch·ªçn: {selectedBudget.toLocaleString('vi-VN')}‚Ç´/ng√†y
        </p>
      </div>

      {/* Preset Buttons */}
      <div className="flex gap-3 mb-6">
        {budgetRanges.map((range) => (
          <button
            key={range.id}
            onClick={() => handlePresetSelect(range.value)}
            className={`flex-1 px-4 py-2 rounded-lg border-2 text-sm font-medium transition-all ${
              selectedBudget === range.value
                ? 'border-blue-500 bg-blue-50 text-blue-700'
                : 'border-gray-300 hover:border-gray-400 text-gray-900'
            }`}
          >
            {range.label} ({range.value.toLocaleString('vi-VN')}‚Ç´/ng√†y)
          </button>
        ))}
      </div>

      {/* K·∫ø ti·∫øp Button */}
      <button
        onClick={handleContinue}
        className="w-full bg-black text-white font-medium py-3 rounded-lg hover:bg-gray-800 transition-colors mb-8"
      >
        K·∫ø ti·∫øp
      </button>

      {/* C·∫ßn t∆∞ v·∫•n chi ti·∫øt h∆°n Section */}
      <div className="text-center pt-6 border-t border-gray-200">
        <h4 className="text-lg font-semibold text-gray-900 mb-3">
          C·∫ßn t∆∞ v·∫•n chi ti·∫øt h∆°n
        </h4>
        <p className="text-sm text-gray-600 mb-4">
          C√°c chuy√™n gia nhi·∫øp ·∫£nh c·ªßa ch√∫ng t√¥i ƒë√£ s·∫µn s√†ng ƒë·ªÉ gi√∫p b·∫°n t√¨m th·∫•y thi·∫øt b·ªã ho√†n h·∫£o cho c√°c nhu c·∫ßu c·ª• th·ªÉ c·ªßa b·∫°n. Ph·∫£n h·ªìi s·∫Ω ƒë∆∞·ª£c ph·∫£n h·ªìi trong v√≤ng 24 gi·ªù.
        </p>
        <button
          onClick={() => alert('T√≠nh nƒÉng chat v·ªõi chuy√™n gia s·∫Øp ra m·∫Øt!')}
          className="bg-black text-white px-6 py-2.5 rounded-lg text-sm font-medium hover:bg-gray-800 transition-colors"
        >
          Tr√≤ chuy·ªán v·ªõi Shop
        </button>
      </div>
    </div>
  );
}

// Options Step Component (separate for complexity)
function OptionsStep({ 
  onComplete, 
  brands, 
  features 
}: { 
  onComplete: (brands: string[], features: string[]) => void;
  brands: string[];
  features: Array<{ id: string; label: string; icon: string }>;
}) {
  const [selectedBrands, setSelectedBrands] = useState<string[]>([]);
  const [selectedFeatures, setSelectedFeatures] = useState<string[]>([]);

  const toggleBrand = (brand: string) => {
    setSelectedBrands(prev =>
      prev.includes(brand) ? prev.filter(b => b !== brand) : [...prev, brand]
    );
  };

  const toggleFeature = (featureId: string) => {
    setSelectedFeatures(prev =>
      prev.includes(featureId) ? prev.filter(f => f !== featureId) : [...prev, featureId]
    );
  };

  const handleContinue = () => {
    onComplete(selectedBrands, selectedFeatures);
  };

  const handleSkip = () => {
    onComplete([], []);
  };

  return (
    <div className="p-6 bg-white rounded-lg shadow-sm">
      <h3 className="text-lg font-semibold text-gray-900 mb-2">
        B·∫•t k·ª≥ t√≠nh nƒÉng ho·∫∑c th∆∞∆°ng hi·ªáu c·ª• th·ªÉ n√†o b·∫°n th√≠ch?
      </h3>
      <p className="text-sm text-gray-600 mb-6">
        B∆∞·ªõc &ldquo;Tu·ª≥ ch·ªçn&rdquo; gi√∫p AI bi·∫øt b·∫°n ∆∞u ti√™n th∆∞∆°ng hi·ªáu n√†o v√† nh·ªØng t√≠nh nƒÉng c·∫ßn c√≥ (l·∫•y n√©t nhanh, ch·ªëng rung, quay video n√¢ng cao‚Ä¶) ƒë·ªÉ g·ª£i √Ω b·ªô thi·∫øt b·ªã ƒë√∫ng √Ω nh·∫•t.
      </p>

      {/* Brands */}
      <div className="mb-6">
        <h4 className="font-medium text-gray-900 mb-3">Th∆∞∆°ng hi·ªáu nhi·∫øp ·∫£nh</h4>
        <div className="grid grid-cols-5 gap-2">
          {brands.map((brand) => (
            <button
              key={brand}
              onClick={() => toggleBrand(brand)}
              className={`px-4 py-2.5 rounded-lg border-2 text-sm font-medium transition-all ${
                selectedBrands.includes(brand)
                  ? 'border-blue-500 bg-blue-50 text-blue-700'
                  : 'border-gray-300 hover:border-gray-400 bg-white text-gray-900'
              }`}
            >
              {brand}
            </button>
          ))}
        </div>
      </div>

      {/* Features */}
      <div className="mb-6">
        <h4 className="font-medium text-gray-900 mb-3">T√≠nh nƒÉng thi·∫øt b·ªã</h4>
        <div className="grid grid-cols-2 gap-3">
          {features.map((feature) => (
            <button
              key={feature.id}
              onClick={() => toggleFeature(feature.id)}
              className={`flex items-center gap-3 p-3 rounded-lg border-2 transition-all ${
                selectedFeatures.includes(feature.id)
                  ? 'border-blue-500 bg-blue-50 text-blue-700'
                  : 'border-gray-300 hover:border-gray-400 bg-white text-gray-900'
              }`}
            >
              <span className="text-xl">{feature.icon}</span>
              <span className="text-sm font-medium text-left">{feature.label}</span>
            </button>
          ))}
        </div>
      </div>

      {/* Action Buttons */}
      <div className="flex gap-3 mb-8">
        <button
          onClick={handleSkip}
          className="flex-1 bg-white border-2 border-gray-300 text-gray-900 font-medium py-3 rounded-lg hover:bg-gray-50 transition-colors"
        >
          B·ªè qua
        </button>
        <button
          onClick={handleContinue}
          className="flex-1 bg-black text-white font-medium py-3 rounded-lg hover:bg-gray-800 transition-colors"
        >
          K·∫ø ti·∫øp
        </button>
      </div>

      {/* C·∫ßn t∆∞ v·∫•n chi ti·∫øt h∆°n Section */}
      <div className="text-center pt-6 border-t border-gray-200">
        <h4 className="text-lg font-semibold text-gray-900 mb-3">
          C·∫ßn t∆∞ v·∫•n chi ti·∫øt h∆°n
        </h4>
        <p className="text-sm text-gray-600 mb-4">
          C√°c chuy√™n gia nhi·∫øp ·∫£nh c·ªßa ch√∫ng t√¥i ƒë√£ s·∫µn s√†ng ƒë·ªÉ gi√∫p b·∫°n t√¨m th·∫•y thi·∫øt b·ªã ho√†n h·∫£o cho c√°c nhu c·∫ßu c·ª• th·ªÉ c·ªßa b·∫°n. Ph·∫£n h·ªìi s·∫Ω ƒë∆∞·ª£c ph·∫£n h·ªìi trong v√≤ng 24 gi·ªù.
        </p>
        <button
          onClick={() => alert('T√≠nh nƒÉng chat v·ªõi chuy√™n gia s·∫Øp ra m·∫Øt!')}
          className="bg-black text-white px-6 py-2.5 rounded-lg text-sm font-medium hover:bg-gray-800 transition-colors"
        >
          Tr√≤ chuy·ªán v·ªõi Shop
        </button>
      </div>
    </div>
  );
}
