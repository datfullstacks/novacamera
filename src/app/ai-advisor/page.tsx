'use client';

import { useState, useMemo } from 'react';
import Header from '@/components/organisms/Header';
import ChatProvider from '@/components/layout/ChatProvider';
import StandaloneWizard from '@/components/ai-advisor/StandaloneWizard';
import ChatInterface from '@/components/ai-advisor/ChatInterface';
import EquipmentRecommendations from '@/components/ai-advisor/EquipmentRecommendations';
import { chatService } from '@/lib/api/chatService';
import { generateQuestionFromWizard } from '@/lib/utils/wizardToQuestion';
import type { EquipmentResponse } from '@/types/api/equipment';

export default function AIAdvisorPage() {
  const [showChat, setShowChat] = useState(false);
  const [wizardComplete, setWizardComplete] = useState(false);
  const [wizardData, setWizardData] = useState<Record<string, unknown> | null>(null);
  const [aiRecommendations, setAiRecommendations] = useState<string>('');
  const [isLoadingRecommendations, setIsLoadingRecommendations] = useState(false);
  const [recommendedEquipment, setRecommendedEquipment] = useState<EquipmentResponse[]>([]);
  const [initialQuestion, setInitialQuestion] = useState<string>('');

  const handleWizardComplete = async (data: Record<string, unknown>) => {
    console.log('üéØ Wizard completed with data:', data);
    setWizardData(data);
    setWizardComplete(true);

    // T·∫°o c√¢u h·ªèi t·ª´ wizard data
    const question = generateQuestionFromWizard(data);
    setInitialQuestion(question);
    console.log('‚ùì Generated question:', question);

    // G·ªçi AI API ƒë·ªÉ l·∫•y recommendations
    setIsLoadingRecommendations(true);
    try {
      const response = await chatService.askQuestion(question);
      console.log('üì° Full API Response:', response);
      
      if (response.success && response.data) {
        // Always set AI answer
        setAiRecommendations(response.data.answer);
        console.log('ü§ñ AI Answer:', response.data.answer);
        
        // Convert contextProducts to EquipmentResponse format (if exists)
        if (response.data.contextProducts && response.data.contextProducts.length > 0) {
          console.log(`üì¶ Processing ${response.data.contextProducts.length} products...`);
          const equipment: EquipmentResponse[] = response.data.contextProducts.map(product => ({
            equipmentId: product.equipmentId,
            categoryId: null,
            name: product.name,
            tagline: null,
            shortDescription: product.description,
            brand: product.brand,
            mainImageUrl: product.imageUrl 
              ? `https://api.mmoshop.site/images/${product.imageUrl}` 
              : null,
            description: product.description,
            conditionNote: null,
            pricePerDay: product.pricePerDay,
            depositFee: product.depositFee,
            rating: null,
            reviewCount: null,
            status: null,
            stock: product.stock,
            rentalCount: null,
            categoryName: product.category,
            isAvailable: (product.stock ?? 0) > 0,
            location: null,
            imageResponses: [],
            formattedPrice: null,
            formattedDeposit: null,
            ratingStars: null,
            reviewText: null,
            availabilityText: null,
          }));
          
          setRecommendedEquipment(equipment);
          console.log('‚úÖ Equipment converted successfully:', equipment.length, 'items');
        } else {
          console.log('üí¨ Text-only response (no equipment products)');
          setRecommendedEquipment([]);
        }
      } else {
        console.error('‚ùå API response not successful:', response);
      }
    } catch (error) {
      console.error('üî• Error getting AI recommendations:', error);
    } finally {
      setIsLoadingRecommendations(false);
      console.log('‚èπÔ∏è Loading finished');
    }
  };

  // Memoize recommendations ƒë·ªÉ tr√°nh re-create m·ªói l·∫ßn render
  const recommendations = useMemo(() => {
    if (!wizardData || recommendedEquipment.length === 0) return null;
    
    // Group equipment by category
    const groupedByCategory: Record<string, EquipmentResponse[]> = {};
    recommendedEquipment.forEach(eq => {
      const category = eq.categoryName || 'Kh√°c';
      if (!groupedByCategory[category]) {
        groupedByCategory[category] = [];
      }
      groupedByCategory[category].push(eq);
    });

    // Convert to RecommendationSection format
    const sections = Object.entries(groupedByCategory).map(([category, items]) => {
      // Map category to icon
      let icon = 'üì¶';
      let title = category;
      
      if (category.toLowerCase().includes('camera') || category.toLowerCase().includes('m√°y ·∫£nh')) {
        icon = 'üì∑';
        title = 'M√°y ·∫£nh ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t';
      } else if (category.toLowerCase().includes('lens') || category.toLowerCase().includes('·ªëng k√≠nh')) {
        icon = 'üîç';
        title = '·ªêng k√≠nh ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t';
      } else if (category.toLowerCase().includes('accessory') || category.toLowerCase().includes('ph·ª• ki·ªán')) {
        icon = '‚öôÔ∏è';
        title = 'Ph·ª• ki·ªán ƒë∆∞·ª£c ƒë·ªÅ xu·∫•t';
      }

      return {
        title,
        icon,
        items: items.map(eq => ({
          equipmentId: eq.equipmentId,
          equipmentName: eq.name || 'Unnamed Equipment',
          price: eq.pricePerDay,
          image: eq.mainImageUrl || 'https://via.placeholder.com/300x200',
          features: [
            eq.brand || '',
            eq.tagline || '',
            eq.shortDescription || ''
          ].filter(Boolean),
          category: category.toLowerCase(),
        }))
      };
    });
    
    return (
      <EquipmentRecommendations recommendations={sections} />
    );
  }, [wizardData, recommendedEquipment]);

  return (
    <ChatProvider>
      <div className="min-h-screen bg-gray-50 pt-20">
        <Header />
        <main className="container mx-auto px-4 py-8">
          <div className="max-w-5xl mx-auto">
            
            {!showChat ? (
              // G·ª£i √Ω thu√™ thi·∫øt b·ªã Section - Initial View
              <div className="text-center mb-12 py-16">
                <h1 className="text-4xl font-bold text-gray-900 mb-4">
                  G·ª£i √Ω thu√™ thi·∫øt b·ªã?
                </h1>
                <p className="text-lg text-gray-600 max-w-3xl mx-auto mb-8">
                  C√≥ v·∫•n AI c·ªßa ch√∫ng t√¥i l√†m cho l·ª±a ch·ªçn thi·∫øt b·ªã t·ªëi ƒë∆°n gi·∫£n v√† v√† th√¥ng minh. Ch·ªâ c·∫ßn tr·∫£ l·ªùi m·ªôt v√†i c√¢u h·ªèi v√† ch√∫ng t√¥i s·∫Ω ƒë·ªÅ xu·∫•t c√°c thi·∫øt b·ªã t·ªëi ho√†n h·∫£o ph√π h·ª£p v·ªõi d·ª± √°n nhi·∫øp ·∫£nh c·ªßa b·∫°n.
                </p>
                <button
                  onClick={() => setShowChat(true)}
                  className="inline-block bg-black text-white px-8 py-3 rounded-lg font-medium hover:bg-gray-800 transition-colors"
                >
                  B·∫Øt ƒë·∫ßu AI Advisor
                </button>
              </div>
            ) : !wizardComplete || isLoadingRecommendations ? (
              // Wizard Steps OR Loading - Shows after clicking "B·∫Øt ƒë·∫ßu AI Advisor"
              <div className="mb-12">
                {isLoadingRecommendations ? (
                  <div className="flex flex-col items-center justify-center py-16">
                    <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-black mb-4"></div>
                    <p className="text-lg text-gray-600">ƒêang ph√¢n t√≠ch v√† t√¨m ki·∫øm thi·∫øt b·ªã ph√π h·ª£p...</p>
                    <p className="text-sm text-gray-400 mt-2">Vui l√≤ng ƒë·ª£i...</p>
                  </div>
                ) : (
                  <StandaloneWizard onComplete={handleWizardComplete} />
                )}
              </div>
            ) : wizardComplete && !isLoadingRecommendations && (aiRecommendations || recommendedEquipment.length > 0) ? (
              // Chat Interface - Shows after wizard completion AND data loaded
              <div className="mb-12">
                <ChatInterface 
                  initialRecommendations={recommendations}
                  initialQuestion={initialQuestion}
                  initialAIResponse={aiRecommendations}
                />
              </div>
            ) : (
              // Fallback: Show error or retry
              <div className="mb-12">
                <div className="flex flex-col items-center justify-center py-16 px-4">
                  <div className="text-6xl mb-4">üòï</div>
                  <h3 className="text-xl font-semibold text-gray-900 mb-2">Kh√¥ng th·ªÉ t·∫£i ƒë·ªÅ xu·∫•t</h3>
                  <p className="text-gray-600 mb-4 text-center max-w-md">
                    ƒê√£ x·∫£y ra l·ªói khi l·∫•y ƒë·ªÅ xu·∫•t thi·∫øt b·ªã. Vui l√≤ng th·ª≠ l·∫°i.
                  </p>
                  <button
                    onClick={() => {
                      setWizardComplete(false);
                      setShowChat(true);
                      setRecommendedEquipment([]);
                      setAiRecommendations('');
                    }}
                    className="px-6 py-2 bg-black text-white rounded-lg hover:bg-gray-800 transition-colors"
                  >
                    Th·ª≠ l·∫°i
                  </button>
                </div>
              </div>
            )}

            {/* FAQ Section - No border, clean background */}
            <div className="mt-16">
              <h2 className="text-2xl font-semibold text-gray-900 mb-6 text-center">
                C√¢u h·ªèi th∆∞·ªùng g·∫∑p
              </h2>
              <p className="text-center text-gray-600 mb-8">
                Nhi√™n c√¢u tr·∫£ l·ªùi cho c√°c c√¢u h·ªèi ph·ªï bi·∫øn v·ªÅ qu√° tr√¨nh cho thu√™ AI v√† v·ªÅ v·∫•n AI c·ªßa ch√∫ng t√¥i.
              </p>
              <div className="space-y-4">
                <details className="group bg-white rounded-lg p-4 shadow-sm">
                  <summary className="flex justify-between items-center cursor-pointer list-none">
                    <span className="text-lg font-medium text-gray-800">ƒê·ªô ch√≠nh x√°c c·ªßa t∆∞ v·∫•n b·∫±ng AI l√† bao nhi√™u?</span>
                    <span className="transition group-open:rotate-180">
                      <svg fill="none" height="24" shapeRendering="geometricPrecision" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" viewBox="0 0 24 24" width="24">
                        <path d="M6 9l6 6 6-6"></path>
                      </svg>
                    </span>
                  </summary>
                  <p className="text-gray-600 mt-3 group-open:animate-fadeIn">
                    AI c·ªßa ch√∫ng t√¥i ƒë∆∞·ª£c hu·∫•n luy·ªán t·ª´ h√†ng ngh√¨n d·ª± √°n nhi·∫øp ·∫£nh th√†nh c√¥ng v√† ph·∫£n h·ªìi t·ª´ ng∆∞·ªùi d√πng chuy√™n nghi·ªáp. ƒê·ªô ch√≠nh x√°c ƒë·∫°t 90%+ cho c√°c d·ª± √°n th√¥ng th∆∞·ªùng.
                  </p>
                </details>

                <details className="group bg-white rounded-lg p-4 shadow-sm">
                  <summary className="flex justify-between items-center cursor-pointer list-none">
                    <span className="text-lg font-medium text-gray-800">T√¥i c√≥ th·ªÉ thay ƒë·ªïi thi·∫øt b·ªã c·ªßa m√¨nh sau khi thu√™ kh√¥ng?</span>
                    <span className="transition group-open:rotate-180">
                      <svg fill="none" height="24" shapeRendering="geometricPrecision" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" viewBox="0 0 24 24" width="24">
                        <path d="M6 9l6 6 6-6"></path>
                      </svg>
                    </span>
                  </summary>
                  <p className="text-gray-600 mt-3 group-open:animate-fadeIn">
                    B·∫°n c√≥ th·ªÉ thay ƒë·ªïi thi·∫øt b·ªã trong v√≤ng 24 gi·ªù ƒë·∫ßu ti√™n sau khi nh·∫≠n h√†ng, mi·ªÖn l√† thi·∫øt b·ªã ch∆∞a s·ª≠ d·ª•ng v√† c√≤n nguy√™n v·∫πn. Ph√≠ thay ƒë·ªïi c√≥ th·ªÉ ƒë∆∞·ª£c √°p d·ª•ng.
                  </p>
                </details>

                <details className="group bg-white rounded-lg p-4 shadow-sm">
                  <summary className="flex justify-between items-center cursor-pointer list-none">
                    <span className="text-lg font-medium text-gray-800">N·∫øu t√¥i c√≥ y√™u c·∫ßu c·ª• th·ªÉ h∆°n th√¨ sao?</span>
                    <span className="transition group-open:rotate-180">
                      <svg fill="none" height="24" shapeRendering="geometricPrecision" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" viewBox="0 0 24 24" width="24">
                        <path d="M6 9l6 6 6-6"></path>
                      </svg>
                    </span>
                  </summary>
                  <p className="text-gray-600 mt-3 group-open:animate-fadeIn">
                    B·∫°n c√≥ th·ªÉ chat tr·ª±c ti·∫øp v·ªõi chuy√™n gia c·ªßa ch√∫ng t√¥i th√¥ng qua n√∫t &quot;Chat with Shop&quot; trong giao di·ªán AI. ƒê·ªôi ng≈© chuy√™n gia s·∫Ω t∆∞ v·∫•n c√° nh√¢n h√≥a cho d·ª± √°n c·ªßa b·∫°n.
                  </p>
                </details>

                <details className="group bg-white rounded-lg p-4 shadow-sm">
                  <summary className="flex justify-between items-center cursor-pointer list-none">
                    <span className="text-lg font-medium text-gray-800">T∆∞ v·∫•n AI c√≥ gi·ªõi thi·ªáu ph·ª• ki·ªán qu√° kh√¥ng?</span>
                    <span className="transition group-open:rotate-180">
                      <svg fill="none" height="24" shapeRendering="geometricPrecision" stroke="currentColor" strokeLinecap="round" strokeLinejoin="round" strokeWidth="1.5" viewBox="0 0 24 24" width="24">
                        <path d="M6 9l6 6 6-6"></path>
                      </svg>
                    </span>
                  </summary>
                  <p className="text-gray-600 mt-3 group-open:animate-fadeIn">
                    AI ch·ªâ ƒë·ªÅ xu·∫•t ph·ª• ki·ªán th·ª±c s·ª± c·∫ßn thi·∫øt cho d·ª± √°n c·ªßa b·∫°n. B·∫°n ho√†n to√†n c√≥ th·ªÉ b·ªè qua c√°c ƒë·ªÅ xu·∫•t ph·ª• ki·ªán n·∫øu kh√¥ng c·∫ßn thi·∫øt.
                  </p>
                </details>
              </div>
            </div>
          </div>
        </main>
      </div>
    </ChatProvider>
  );
}